http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable
Az érdekes rész belőle talán ez lehet:
Since a ThreadLocal is a reference to data within a given Thread, you can end up with classloading leaks when using ThreadLocals in application servers which use thread pools. You need to be very careful about cleaning up any ThreadLocals you get() or set() by using the ThreadLocal's remove() method.

If you do not clean up when you're done, any references it holds to classes loaded as part of a deployed webapp will remain in the permanent heap and will never get garbage collected. Redeploying/undeploying the webapp will not clean up each Thread's reference to your webapp's class(es) since the Thread is not something owned by your webapp. Each successive deployment will create a new instance of the class which will never be garbage collected.

You will end up with out of memory exceptions due to java.lang.OutOfMemoryError: PermGen space and after some googling will probably just increase -XX:MaxPermSize instead of fixing the bug.

If you do end up experiencing these problems, you can determine which thread and class is retaining these references by using Eclipse's Memory Analyzer and/or by following Frank Kieviet's guide and followup.

Update: Re-discovered Alex Vasseur's blog entry that helped me track down some ThreadLocal issues I was having.



Egyszer volt, hol nem volt, élt egy boldog programozó, aki egy nap készített egy Java alkalmazást. Ez a kis program a main metódusában elindított egy hosszan futó szálat, ami nem mást csinált, mint betöltött egy osztályt egy tetszőleges ClassLoader segítségével. A frissen betöltött osztály egy statikus változóban eltárolta egy bájt tömb objektum referenciáját, amit a saját statikus inicializáló blokkjában hozott létre, majd a saját konstruktorában hozzáadta önmaga referenciáját a ThreadLocal-hoz. Amint ezzel végzett, a hosszan futó szál törölt minden hivatkozást a betöltött osztályra, majd újra és újra megcsinálta ugyanezt egészen addig, amíg a boldog programozónak már lefelé görbült a szája.

Milyen lehetséges okai lehettek a programozó elkámpicsorodásának?

A - Kiderült, hogy az általa használt JVM implementáció az osztályokat és a ClassLoader-eket egyenesen a permgen-ben tárolja, amikhez a GC soha nem fér hozzá.
A PermGen-en is lefut a GC, de az osztálybetöltőket manuálisan kell megszűntetni, hogy szemétgyűjthető legyen. Mindaddig amíg a manuális megszűntetés nem történik meg, addig az osztáylbetöltő referenciákat tartalmaz az általa létrehozott osztályokra/példányokra. http://stackoverflow.com/questions/3796427/in-java-is-permanent-generation-space-garbage-collected

B - Memóriaszivárgás történt az alkalmazásban.
Igen, szerintem ez történt, mert a betöltött osztályokat sosem takarította ki a gc, ez a csatolt jvisualvm-es képen is látszik. http://stackoverflow.com/questions/17968803/threadlocal-memory-leak A program 5 perc után elszállt az alábbi hibaüzenettel:

Exception in thread "Thread-0" java.lang.OutOfMemoryError: GC overhead limit exceeded
	at question_18.ClassToLoad.<clinit>(ClassToLoad.java:10)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at java.lang.Class.newInstance(Class.java:442)
	at question_18.LongRunningThread.lambda$0(LongRunningThread.java:11)
	at question_18.LongRunningThread$$Lambda$1/834600351.run(Unknown Source)
	at java.lang.Thread.run(Thread.java:745)


C - Elvesztek a referenciák a ThreadLocal-ból.
Szerintem nem.

D - A thread-et kiszolgáló CPU mag regiszterei elkezdtek betelni.
Szerintem ez sem.

E - A folyamatos osztálybetöltés miatt egy idő után StackOverflowError lépett fel.
Nem lépett fel ilyen kivétel.
